[{
    "name": "Equal",
    "code": "string.equal",
    "inputs": {"1": "String", "3": "String", "2": "String", "5": "String", "4": "String"},
    "outputs": {"result": "Boolean"},
    "args": 5,
    "desc": "Check if values are equal."
},
{
    "name": "String Constant",
    "code": "string.const",
    "inputs": {},
    "outputs": {"result": "String"},
    "args": "Hello World!",
    "desc": "Pass the string arg as output."
},
{
    "name": "String Argument Trigger",
    "code": "string.argtrigger",
    "inputs": {},
    "outputs": {"result": "String"},
    "args": {"val": "arg", "time": 1.0},
    "desc": "Pass the argument of the program."
},
{
    "name": "Index of",
    "code": "string.indexof",
    "inputs": {"ref": "String", "str": "String", "offset": "Number"},
    "outputs": {"result": "Number"},
    "args": "",
    "desc": "Get the index of a ref in a string."
},
{
    "name": "Ends with",
    "code": "string.endswith",
    "inputs": {"ref": "String", "str": "String"},
    "outputs": {"result": "Boolean"},
    "args": "",
    "desc": "Check if a string ends with the reference."
},
{
    "name": "String Concat",
    "code": "string.concat",
    "inputs": {"right": "String", "left": "String"},
    "outputs": {"result": "String"},
    "args": "",
    "desc": "Concat the two strings."
},
{
    "name": "Starts with",
    "code": "string.startswith",
    "inputs": {"ref": "String", "str": "String"},
    "outputs": {"result": "Boolean"},
    "args": "",
    "desc": "String starts with ref."
},
{
    "name": "String Argument",
    "code": "string.argconst",
    "inputs": {},
    "outputs": {"result": "String"},
    "args": "arg",
    "desc": "Pass the argument of the program."
},
{
    "name": "Split",
    "code": "string.split",
    "inputs": {"splitter": "String", "str": "String"},
    "outputs": {"result": "Array"},
    "args": "",
    "desc": "Split a string by a splitter."
},
{
    "name": "Trigger string",
    "code": "string.trigger",
    "inputs": {},
    "outputs": {"result": "String"},
    "args": {"val": "Hello World!", "time": 1.0},
    "desc": "Trigger string."
},
{
    "name": "Equal",
    "code": "number.equal",
    "inputs": {"1": "Number", "3": "Number", "2": "Number", "5": "Number", "4": "Number"},
    "outputs": {"result": "Boolean"},
    "args": 5,
    "desc": "Check if values are equal."
},
{
    "name": "Number Constant",
    "code": "number.const",
    "inputs": {},
    "outputs": {"result": "Number"},
    "args": 1.0,
    "desc": "Pass the number arg as output."
},
{
    "name": "Number Argument Trigger",
    "code": "number.argtrigger",
    "inputs": {},
    "outputs": {"result": "Number"},
    "args": {"val": "arg", "time": 1.0},
    "desc": "Pass the argument of the program."
},
{
    "name": "Sum",
    "code": "number.sum",
    "inputs": {"right": "Number", "left": "Number"},
    "outputs": {"result": "Number"},
    "args": "",
    "desc": "Sum left and right."
},
{
    "name": "Subtract",
    "code": "number.subtract",
    "inputs": {"right": "Number", "left": "Number"},
    "outputs": {"result": "Number"},
    "args": "",
    "desc": "Subtract right from left."
},
{
    "name": "Less than",
    "code": "number.less",
    "inputs": {"right": "Number", "left": "Number"},
    "outputs": {"result": "Number"},
    "args": "",
    "desc": "Check if left < right."
},
{
    "name": "Greater than",
    "code": "number.greater",
    "inputs": {"right": "Number", "left": "Number"},
    "outputs": {"result": "Number"},
    "args": "",
    "desc": "Check if left > right."
},
{
    "name": "Number Argument",
    "code": "number.argconst",
    "inputs": {},
    "outputs": {"result": "Number"},
    "args": "arg",
    "desc": "Pass the argument of the program."
},
{
    "name": "Divide",
    "code": "number.div",
    "inputs": {"right": "Number", "left": "Number"},
    "outputs": {"result": "Number"},
    "args": "",
    "desc": "Divide left by right."
},
{
    "name": "Multiply",
    "code": "number.mult",
    "inputs": {"right": "Number", "left": "Number"},
    "outputs": {"result": "Number"},
    "args": "",
    "desc": "Multiply values with each other."
},
{
    "name": "Trigger Number",
    "code": "number.trigger",
    "inputs": {},
    "outputs": {"result": "Number"},
    "args": {"val": 42, "time": 1.0},
    "desc": "Trigger value every time seconds."
},
{
    "name": "Function",
    "code": "default.function",
    "inputs": {"val": "Object"},
    "outputs": {"result": "Object"},
    "args": {"code": "result = value[\"val\"]"},
    "desc": "Executes the argument as pyton code."
},
{
    "name": "Splitflow 2",
    "code": "default.splitflow",
    "inputs": {"val": "Object"},
    "outputs": {"right": "Object", "left": "Object"},
    "args": "",
    "desc": "Splits the flow."
},
{
    "name": "Accept any input",
    "code": "default.any",
    "inputs": {"val": "Object"},
    "outputs": {"result": "Object"},
    "args": "",
    "desc": "If any input is present pass it."
},
{
    "name": "Splitflow 5",
    "code": "default.splitflow5",
    "inputs": {"val": "Object"},
    "outputs": {"1": "Object", "3": "Object", "2": "Object", "5": "Object", "4": "Object"},
    "args": "",
    "desc": "Splits the flow."
},
{
    "name": "Leaky Integrator",
    "code": "structures.leakyintegrator",
    "inputs": {"val": "Number"},
    "outputs": {"result": "Boolean"},
    "args": {"decay": 1.0, "time": 1.0},
    "desc": "Leaky integrator."
},
{
    "name": "While less",
    "code": "structures.whileless",
    "inputs": {"initial": "Number", "val": "Number"},
    "outputs": {"leave": "Number", "loop": "Number"},
    "args": "",
    "desc": "Loop while initial is less than val."
},
{
    "name": "While greater",
    "code": "structures.whilegreater",
    "inputs": {"initial": "Number", "val": "Number"},
    "outputs": {"leave": "Number", "loop": "Number"},
    "args": "",
    "desc": "Loop while initial is greater than val."
},
{
    "name": "If",
    "code": "structures.if",
    "inputs": {"val": "Object", "condition": "Boolean"},
    "outputs": {"false": "Object", "true": "Object"},
    "args": "",
    "desc": "If condition pass to true otherwise to false."
},
{
    "name": "Array const",
    "code": "arrays.const",
    "inputs": {},
    "outputs": {"result": "Array"},
    "args": {"vals": [0, 1, 2, 3, 4, 5]},
    "desc": "A constant input array."
},
{
    "name": "Array Generator",
    "code": "arrays.generate",
    "inputs": {},
    "outputs": {"result": "Array"},
    "args": {"range": 100, "code": "y = x", "repeating": false, "time": 1},
    "desc": "Executes the argument function as python code."
},
{
    "name": "Arg trigger",
    "code": "arrays.argtrigger",
    "inputs": {},
    "outputs": {"result": "String"},
    "args": {"val": "arg", "time": 1.0},
    "desc": "Get triggers from commandline."
},
{
    "name": "Gaussian Generator",
    "code": "arrays.gaussian",
    "inputs": {},
    "outputs": {"result": "Array"},
    "args": {"range": 100, "sigma": 1},
    "desc": "Executes the argument function as python code."
},
{
    "name": "Subtract",
    "code": "arrays.subtract",
    "inputs": {"right": "Array", "left": "Array"},
    "outputs": {"result": "Array"},
    "args": {},
    "desc": "Left minus right."
},
{
    "name": "Multiply (:Matrix)",
    "code": "arrays.multInflate",
    "inputs": {"right": "Array", "left": "Array"},
    "outputs": {"result": "Matrix"},
    "args": {},
    "desc": "Multiply two values as product resulting in a matrix."
},
{
    "name": "Arg const",
    "code": "arrays.argconst",
    "inputs": {},
    "outputs": {"result": "String"},
    "args": "arg",
    "desc": "Get triggers from commandline."
},
{
    "name": "Convolute",
    "code": "arrays.convolute",
    "inputs": {"kernel": "Array", "data": "Array"},
    "outputs": {"result": "Array"},
    "args": {},
    "desc": "Convolute two arrays."
},
{
    "name": "Add",
    "code": "arrays.add",
    "inputs": {"right": "Array", "left": "Array"},
    "outputs": {"result": "Array"},
    "args": {},
    "desc": "A constant input array."
},
{
    "name": "Multiply",
    "code": "arrays.mult",
    "inputs": {"right": "Array", "left": "Array"},
    "outputs": {"result": "Double"},
    "args": {},
    "desc": "Multiply two values as scalar product."
},
{
    "name": "Array trigger",
    "code": "arrays.trigger",
    "inputs": {},
    "outputs": {"result": "Array"},
    "args": {"vals": [0, 1, 2, 3, 4, 5], "time": 1.0},
    "desc": "A constant input array."
},
{
    "name": "TCP Network",
    "code": "system.tcpnetwork",
    "inputs": {"msg": "String"},
    "outputs": {"result": "String"},
    "args": {"host": "127.0.0.1", "password": null, "port": 25555},
    "desc": "Send input over network and wait for result."
},
{
    "name": "[WIP] WebSocket",
    "code": "system.websocketoutput",
    "inputs": {"val": "Object"},
    "outputs": {},
    "args": {},
    "desc": "Output on a websocket."
},
{
    "name": "Output",
    "code": "system.output",
    "inputs": {"arg": "String"},
    "outputs": {},
    "args": "arg",
    "desc": "Set an output arg."
},
{
    "name": "Subgraph",
    "code": "system.subgraph",
    "inputs": {"arg": "Object"},
    "outputs": {"result": "Object"},
    "args": "DefaultGraph",
    "desc": "Execute a subgraph."
},
{
    "name": "[WIP] WebSocket",
    "code": "system.websocketrequest",
    "inputs": {"val": "Object"},
    "outputs": {"result": "Object"},
    "args": {},
    "desc": "Request on a websocket."
},
{
    "name": "Print",
    "code": "system.print",
    "inputs": {"val": "String"},
    "outputs": {},
    "args": "",
    "desc": "Print input to console."
},
{
    "name": "TCP Network",
    "code": "system.tcpnetworkin",
    "inputs": {},
    "outputs": {"result": "String"},
    "args": {"server": true, "host": "127.0.0.1", "passDummy": null, "passSocketAsTag": true, "password": null, "port": 25555},
    "desc": "Wait for input over network."
},
{
    "name": "Execute",
    "code": "system.executable",
    "inputs": {"arg": "String"},
    "outputs": {"result": "String"},
    "args": {"escapeArgs": false, "executable": "python graphex.py"},
    "desc": "Execute executable with given args."
},
{
    "name": "TCP Network",
    "code": "system.tcpnetworkout",
    "inputs": {"msg": "String"},
    "outputs": {},
    "args": {"closeAfterSend": true, "host": "127.0.0.1", "password": null, "port": 25555},
    "desc": "Send message over tcp network."
},
{
    "name": "[WIP] HTTP Output",
    "code": "system.httpoutput",
    "inputs": {"val": "String"},
    "outputs": {},
    "args": {},
    "desc": "Output value to http connection."
},
{
    "name": "[WIP] HTTP Request",
    "code": "system.httprequest",
    "inputs": {"val": "Object"},
    "outputs": {"result": "Object"},
    "args": {"host": "localhost", "port": 80, "method": "get"},
    "desc": "Execute an http request on a host."
},
{
    "name": "[WIP] WebSocket",
    "code": "system.websocketinput",
    "inputs": {},
    "outputs": {"result": "Object"},
    "args": {},
    "desc": "Wait for websocket inputs."
},
{
    "name": "[WIP] HTTP Input",
    "code": "system.httpinput",
    "inputs": {},
    "outputs": {"put": "Object", "post": "Object", "delete": "Object", "get": "Object"},
    "args": {"port": 80},
    "desc": "Wait for http requests."
},
{
    "name": "Stringify Json",
    "code": "json.stringify",
    "inputs": {"val": "Object"},
    "outputs": {"result": "String"},
    "args": "",
    "desc": "Makes a json string out of an object."
},
{
    "name": "Parse Json",
    "code": "json.parse",
    "inputs": {"val": "String"},
    "outputs": {"result": "Object"},
    "args": "",
    "desc": "Parse a json string into an object."
},
{
    "name": "Not",
    "code": "boolean.not",
    "inputs": {"val": "Boolean"},
    "outputs": {"result": "Boolean"},
    "args": "",
    "desc": "Output the inverted input."
},
{
    "name": "Equal",
    "code": "boolean.equal",
    "inputs": {"1": "Boolean", "3": "Boolean", "2": "Boolean", "5": "Boolean", "4": "Boolean"},
    "outputs": {"result": "Boolean"},
    "args": 5,
    "desc": "Checks if the first arg inputs are equal."
},
{
    "name": "Const",
    "code": "boolean.const",
    "inputs": {},
    "outputs": {"result": "Boolean"},
    "args": true,
    "desc": "Output the arg."
},
{
    "name": "Arg trigger",
    "code": "boolean.argconst",
    "inputs": {},
    "outputs": {"result": "Boolean"},
    "args": {"val": "arg", "time": 1.0},
    "desc": "Get input from arguments."
},
{
    "name": "And",
    "code": "boolean.and",
    "inputs": {"right": "Boolean", "left": "Boolean"},
    "outputs": {"result": "Boolean"},
    "args": "",
    "desc": "Combine inputs with and."
},
{
    "name": "Arg const",
    "code": "boolean.argconst",
    "inputs": {},
    "outputs": {"result": "Boolean"},
    "args": "arg",
    "desc": "Get input from arguments."
},
{
    "name": "Or",
    "code": "boolean.or",
    "inputs": {"right": "Boolean", "left": "Boolean"},
    "outputs": {"result": "Boolean"},
    "args": "",
    "desc": "Output the or of the inputs."
},
{
    "name": "Trigger",
    "code": "boolean.trigger",
    "inputs": {},
    "outputs": {"result": "Boolean"},
    "args": {"val": true, "time": 1.0},
    "desc": "Trigger arg.val every arg.time s."
},
{
    "name": "[WIP] Plot Array",
    "code": "matplotlib.plotarray",
    "inputs": {"data": "Array"},
    "outputs": {},
    "args": {"subplot": 111, "ion": true, "clear": true, "title": "Debug"},
    "desc": "Plot an array."
},
{
    "name": "[WIP] Plot Image",
    "code": "matplotlib.plotimg",
    "inputs": {"data": "Image"},
    "outputs": {},
    "args": {"subplot": 111, "ion": true, "clear": true, "title": "Debug"},
    "desc": "Plot an image."
},
{
    "name": "Database SQLite",
    "code": "database.databasesqlite",
    "inputs": {},
    "outputs": {},
    "args": {"db_id": "bla", "file": "bla.db"},
    "desc": "Setup the database as SQLite."
},
{
    "name": "Database SQL",
    "code": "database.databasesql",
    "inputs": {},
    "outputs": {},
    "args": {"host": "localhost", "password": "bla", "db_id": "bla", "db": "bla", "user": "bla"},
    "desc": "Creates a connection to a database."
},
{
    "name": "Query Database",
    "code": "database.query",
    "inputs": {"val": "Object"},
    "outputs": {"result": "Object"},
    "args": {"code": "c = db.cursor()\nresult = value[\"val\"]", "db_id": "bla"},
    "desc": "Interact with a db."
},
{
    "name": "Record",
    "code": "computervision.record",
    "inputs": {"img": "Image"},
    "outputs": {},
    "args": {"resource": "test.mp4"},
    "desc": "Apply gaussian blur on image."
},
{
    "name": "Gaussian Blur",
    "code": "computervision.gaussianblur",
    "inputs": {"img": "Image"},
    "outputs": {"result": "Image"},
    "args": 4,
    "desc": "Apply gaussian blur on image."
},
{
    "name": "Add Weighted",
    "code": "computervision.addweighted",
    "inputs": {"right": "Image", "left": "Image"},
    "outputs": {"result": "Image"},
    "args": {"right": 0.5, "left": 0.5},
    "desc": "Add the two images weighted."
},
{
    "name": "Resize",
    "code": "computervision.resize",
    "inputs": {"img": "Image"},
    "outputs": {"result": "Image"},
    "args": {"width": 320, "height": 240},
    "desc": "Resize an image."
},
{
    "name": "Plot features",
    "code": "computervision.plotfeatures",
    "inputs": {"features": "Array", "img": "Image"},
    "outputs": {"img": "Image"},
    "args": "",
    "desc": "Plot features into an image."
},
{
    "name": "Sift",
    "code": "computervision.sift",
    "inputs": {"img": "Image"},
    "outputs": {"features": "Array", "img": "Image"},
    "args": "",
    "desc": "Detect sift features."
},
{
    "name": "Errode",
    "code": "computervision.errode",
    "inputs": {"img": "Image"},
    "outputs": {"result": "Image"},
    "args": {"iterations": 1, "size": 5},
    "desc": "Errode an image."
},
{
    "name": "HSV to BGR",
    "code": "computervision.hsv2bgr",
    "inputs": {"img": "Image"},
    "outputs": {"result": "Image"},
    "args": "",
    "desc": "Convert HSV image to BGR image."
},
{
    "name": "In Range",
    "code": "computervision.inrange",
    "inputs": {"img": "Image"},
    "outputs": {"result": "Image"},
    "args": {"lower-value": 0, "upper-value": 255, "lower-saturisation": 0, "upper-hue": 255, "lower-hue": 0, "upper-saturisation": 255},
    "desc": "Apply an inRange operation on the image."
},
{
    "name": "Dilate",
    "code": "computervision.dilate",
    "inputs": {"img": "Image"},
    "outputs": {"result": "Image"},
    "args": {"iterations": 1, "size": 5},
    "desc": "Dilate an image."
},
{
    "name": "Fixed Intensity",
    "code": "computervision.fixedintensity",
    "inputs": {"img": "Image"},
    "outputs": {"result": "Image"},
    "args": 127,
    "desc": "Set the intensity to a fixed value."
},
{
    "name": "Show",
    "code": "computervision.show",
    "inputs": {"img": "Image"},
    "outputs": {},
    "args": {"fullscreen": true, "title": "Debug View"},
    "desc": "Show an image."
},
{
    "name": "BGR to HSV",
    "code": "computervision.bgr2hsv",
    "inputs": {"img": "Image"},
    "outputs": {"result": "Image"},
    "args": "",
    "desc": "Convert BGR image to HSV image."
},
{
    "name": "Image to distribution",
    "code": "computervision.img2distribution",
    "inputs": {"img": "Image"},
    "outputs": {"result": "Array"},
    "args": "",
    "desc": "Convert an image to a distribution."
},
{
    "name": "Fixed Saturisation",
    "code": "computervision.fixedsaturisation",
    "inputs": {"img": "Image"},
    "outputs": {"result": "Image"},
    "args": 127,
    "desc": "Set the saturisation to a fixed value."
},
{
    "name": "Fixed Hue",
    "code": "computervision.fixedhue",
    "inputs": {"img": "Image"},
    "outputs": {"result": "Image"},
    "args": 127,
    "desc": "Set the hue to a fixed value."
},
{
    "name": "Median Blur",
    "code": "computervision.medianblur",
    "inputs": {"img": "Image"},
    "outputs": {"result": "Image"},
    "args": 4,
    "desc": "Apply median blur on image."
},
{
    "name": "Video",
    "code": "computervision.video",
    "inputs": {},
    "outputs": {"result": "Image"},
    "args": {"resource": 0, "fps": 30},
    "desc": "Capture video."
},
{
    "name": "Split Topic",
    "code": "bla.splittopic",
    "inputs": {"val": "Object"},
    "outputs": {"put": "Object", "none": "Object", "event": "Object", "get": "Object"},
    "args": {},
    "desc": "Split the flow by topic"
},
{
    "name": "Authenticate",
    "code": "bla.authenticate",
    "inputs": {"val": "Object"},
    "outputs": {"false": "Object", "true": "Object"},
    "args": {"code": "result = value[\"val\"]\nerror = None"},
    "desc": "Authenticates a connection."
}]
