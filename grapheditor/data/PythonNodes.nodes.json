[{
    "name": "Input",
    "code": "InputNode",
    "inputs": {},
    "outputs": {
        "test": "Double"
    },
    "desc": "Outputs 3.14"
},
{
    "name": "One",
    "code": "OneNode",
    "inputs": {},
    "outputs": {
        "result": "Double"
    },
    "desc": "Outputs 1"
},
{
    "name": "Zero",
    "code": "ZeroNode",
    "inputs": {},
    "outputs": {
        "result": "Double"
    },
    "desc": "Outputs 0"
},
{
    "name": "True",
    "code": "TrueNode",
    "inputs": {},
    "outputs": {
        "result": "Boolean"
    },
    "desc": "Outputs true."
},
{
    "name": "False",
    "code": "FalseNode",
    "inputs": {},
    "outputs": {
        "result": "Boolean"
    },
    "desc": "Outputs false."
},
{
    "name": "Sum",
    "code": "SumNode",
    "inputs": {
        "left": "Double",
        "right": "Double"
    },
    "outputs": {
        "result": "Double"
    },
    "desc": "Sum the two inputs."
},
{
    "name": "Subtraction",
    "code": "SubtractNode",
    "inputs": {
        "left": "Double",
        "right": "Double"
    },
    "outputs": {
        "result": "Double"
    },
    "desc": "Subtract the two inputs."
},
{
    "name": "Multiplication",
    "code": "MultNode",
    "inputs": {
        "left": "Double",
        "right": "Double"
    },
    "outputs": {
        "result": "Double"
    },
    "desc": "Multiplicate the two inputs."
},
{
    "name": "Divide",
    "code": "DivNode",
    "inputs": {
        "left": "Double",
        "right": "Double"
    },
    "outputs": {
        "result": "Double"
    },
    "desc": "Divide the two inputs."
},
{
    "name": "Split Flow",
    "code": "SplitFlowNode",
    "inputs": {
        "val": "Double"
    },
    "outputs": {
        "left": "Double",
        "right": "Double"
    },
    "desc": "Passes the variable to both outputs."
},
{
    "name": "Split Flow 5",
    "code": "SplitFlow5Node",
    "inputs": {
        "val": "Double"
    },
    "outputs": {
        "1": "Double",
        "2": "Double",
        "3": "Double",
        "4": "Double",
        "5": "Double"
    },
    "desc": "Passes the variable to all outputs."
},
{
    "name": "Equals",
    "code": "EqualNode",
    "inputs": {
        "left": "Double",
        "right": "Double"
    },
    "outputs": {
        "result": "Boolean"
    },
    "desc": "Checks if two inputs are equal."
},
{
    "name": "Equals 5",
    "code": "Equal5Node",
    "inputs": {
        "1": "Double",
        "2": "Double",
        "3": "Double",
        "4": "Double",
        "5": "Double"
    },
    "outputs": {
        "result": "Boolean"
    },
    "desc": "Checks if all inputs are equal."
},
{
    "name": "Less Than",
    "code": "LessNode",
    "inputs": {
        "left": "Double",
        "right": "Double"
    },
    "outputs": {
        "result": "Boolean"
    },
    "desc": "Checks if left is less than right."
},
{
    "name": "Greater Than",
    "code": "GreaterNode",
    "inputs": {
        "left": "Double",
        "right": "Double"
    },
    "outputs": {
        "result": "Boolean"
    },
    "desc": "Checks if left is greater than right."
},
{
    "name": "And",
    "code": "AndNode",
    "inputs": {
        "left": "Boolean",
        "right": "Boolean"
    },
    "outputs": {
        "result": "Boolean"
    },
    "desc": "Checks if both are true."
},
{
    "name": "Or",
    "code": "OrNode",
    "inputs": {
        "left": "Boolean",
        "right": "Boolean"
    },
    "outputs": {
        "result": "Boolean"
    },
    "desc": "Checks if at least one is true."
},
{
    "name": "Not",
    "code": "NotNode",
    "inputs": {
        "val": "Boolean"
    },
    "outputs": {
        "result": "Boolean"
    },
    "desc": "Invert the input."
},
{
    "name": "If",
    "code": "IfNode",
    "inputs": {
        "condition": "Boolean",
        "val": "Double"
    },
    "outputs": {
        "true": "Boolean",
        "false": "Boolean"
    },
    "desc": "An if statement left is true right is false."
},
{
    "name": "While less than",
    "code": "WhileLessNode",
    "inputs": {
        "initial": "Double",
        "val": "Double"
    },
    "outputs": {
        "leave": "Double",
        "loop": "Double"
    },
    "loopback":[
        "initial"
    ],
    "desc": "While left less than right do right else left."
},
{
    "name": "While greater than",
    "code": "WhileGreaterNode",
    "inputs": {
        "initial": "Double",
        "val": "Double"
    },
    "outputs": {
        "leave": "Double",
        "loop": "Double"
    },
    "loopback":[
        "initial"
    ],
    "desc": "While left larger than right do right else left."
},
{
    "name": "Pass Any",
    "code": "AnyNode",
    "inputs": {
        "val": "Double"
    },
    "outputs": {
        "result": "Double"
    },
    "loopback":[
        "val"
    ],
    "desc": "Just pipes value through. Picks any input."
},
{
    "name": "Division by 2",
    "code": "AlgorithmNode",
    "inputs": {
        "testin": "Double"
    },
    "outputs": {
        "testout": "Double"
    },
    "desc": "Divide input by 2."
},
{
    "name": "Call external executable",
    "code": "ExecutableNode",
    "inputs": {
        "testin": "Double"
    },
    "outputs": {
        "testout": "Double"
    },
    "desc": "Call an external executable.."
},
{
    "name": "Wait for network",
    "code": "NetworkNode",
    "inputs": {
        "testin": "Double"
    },
    "outputs": {
        "testout": "Double"
    },
    "desc": "Wait for a network node to do it's job."
},
{
    "name": "Print to console",
    "code": "OutputNode",
    "inputs": {
        "testres": "Double"
    },
    "outputs": {},
    "desc": "Print the input."
}
]