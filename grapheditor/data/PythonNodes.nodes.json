[{
    "name": "Input",
    "code": "InputNode",
    "inputs": {},
    "outputs": {
        "result": "Double"
    },
    "args":1,
    "desc": "Outputs {arg}"
},
{
    "name": "Leaky Integrator",
    "code": "LeakyIntegratorNode",
    "inputs": {
        "val": "Double"
    },
    "outputs": {
        "result": "Boolean"
    },
    "args":{"time":1,"decay":1},
    "desc": "Adds inputs and looses {decay} per {time} s."
},
{
    "name": "Trigger",
    "code": "TriggerNode",
    "inputs": {},
    "outputs": {
        "result": "Double"
    },
    "args":{"time":5, "val":1},
    "desc": "Outputs {arg}"
},
{
    "name": "Boolean Input",
    "code": "BooleanInputNode",
    "inputs": {},
    "outputs": {
        "result": "Boolean"
    },
    "args":true,
    "desc": "Outputs {args}."
},
{
    "name": "Sum",
    "code": "SumNode",
    "inputs": {
        "left": "Double",
        "right": "Double"
    },
    "outputs": {
        "result": "Double"
    },
    "args":{},
    "desc": "Sum the two inputs."
},
{
    "name": "Subtraction",
    "code": "SubtractNode",
    "inputs": {
        "left": "Double",
        "right": "Double"
    },
    "outputs": {
        "result": "Double"
    },
    "desc": "Subtract the two inputs."
},
{
    "name": "Multiplication",
    "code": "MultNode",
    "inputs": {
        "left": "Double",
        "right": "Double"
    },
    "outputs": {
        "result": "Double"
    },
    "desc": "Multiplicate the two inputs."
},
{
    "name": "Divide",
    "code": "DivNode",
    "inputs": {
        "left": "Double",
        "right": "Double"
    },
    "outputs": {
        "result": "Double"
    },
    "desc": "Divide the two inputs."
},
{
    "name": "Split Flow",
    "code": "SplitFlowNode",
    "inputs": {
        "val": "Double"
    },
    "outputs": {
        "left": "Double",
        "right": "Double"
    },
    "desc": "Passes the variable to both outputs."
},
{
    "name": "Split Flow 5",
    "code": "SplitFlow5Node",
    "inputs": {
        "val": "Double"
    },
    "outputs": {
        "1": "Double",
        "2": "Double",
        "3": "Double",
        "4": "Double",
        "5": "Double"
    },
    "desc": "Passes the variable to all outputs."
},
{
    "name": "Equals 5",
    "code": "EqualNode",
    "inputs": {
        "1": "Double",
        "2": "Double",
        "3": "Double",
        "4": "Double",
        "5": "Double"
    },
    "outputs": {
        "result": "Boolean"
    },
    "args":5,
    "desc": "Checks if first #{args} inputs are equal."
},
{
    "name": "Less Than",
    "code": "LessNode",
    "inputs": {
        "left": "Double",
        "right": "Double"
    },
    "outputs": {
        "result": "Boolean"
    },
    "args":{},
    "desc": "Checks if left is less than right."
},
{
    "name": "Greater Than",
    "code": "GreaterNode",
    "inputs": {
        "left": "Double",
        "right": "Double"
    },
    "outputs": {
        "result": "Boolean"
    },
    "args":{},
    "desc": "Checks if left is greater than right."
},
{
    "name": "And",
    "code": "AndNode",
    "inputs": {
        "left": "Boolean",
        "right": "Boolean"
    },
    "outputs": {
        "result": "Boolean"
    },
    "args":{},
    "desc": "Checks if both are true."
},
{
    "name": "Or",
    "code": "OrNode",
    "inputs": {
        "left": "Boolean",
        "right": "Boolean"
    },
    "outputs": {
        "result": "Boolean"
    },
    "args":{},
    "desc": "Checks if at least one is true."
},
{
    "name": "Not",
    "code": "NotNode",
    "inputs": {
        "val": "Boolean"
    },
    "outputs": {
        "result": "Boolean"
    },
    "args":{},
    "desc": "Invert the input."
},
{
    "name": "If",
    "code": "IfNode",
    "inputs": {
        "condition": "Boolean",
        "val": "Double"
    },
    "outputs": {
        "true": "Boolean",
        "false": "Boolean"
    },
    "args":{},
    "desc": "An if statement left is true right is false."
},
{
    "name": "While less than",
    "code": "WhileLessNode",
    "inputs": {
        "initial": "Double",
        "val": "Double"
    },
    "outputs": {
        "leave": "Double",
        "loop": "Double"
    },
    "loopback":[
        "initial"
    ],
    "args":{},
    "desc": "While left less than right do right else left."
},
{
    "name": "While greater than",
    "code": "WhileGreaterNode",
    "inputs": {
        "initial": "Double",
        "val": "Double"
    },
    "outputs": {
        "leave": "Double",
        "loop": "Double"
    },
    "loopback":[
        "initial"
    ],
    "args":{},
    "desc": "While left larger than right do right else left."
},
{
    "name": "Pass Any",
    "code": "AnyNode",
    "inputs": {
        "val": "Object"
    },
    "outputs": {
        "result": "Object"
    },
    "loopback":[
        "val"
    ],
    "args":{},
    "desc": "Just pipes value through. Picks any input."
},
{
    "name": "Call executable",
    "code": "ExecutableNode",
    "inputs": {
        "arg": "String"
    },
    "outputs": {
        "result": "String"
    },
    "args":"python ../python/graphex.py",
    "desc": "Call {args} with input as param"
},
{
    "name": "Parse Json",
    "code": "JsonParseNode",
    "inputs": {
        "val": "String"
    },
    "outputs": {
        "result": "Object"
    },
    "args":{},
    "desc": "Parse JSON code."
},
{
    "name": "Parse Json",
    "code": "JsonStringifyNode",
    "inputs": {
        "val": "Object"
    },
    "outputs": {
        "result": "String"
    },
    "args":{},
    "desc": "Parse JSON code."
},
{
    "name": "Wait for network",
    "code": "NetworkNode",
    "inputs": {
        "val": "Double"
    },
    "outputs": {
        "result": "Double"
    },
    "args":{"host":"localhost","port":25555},
    "desc": "Wait for a network node to do it's job."
},
{
    "name": "Wait for network",
    "code": "NetworkInputNode",
    "inputs": {},
    "outputs": {
        "result": "Double"
    },
    "args":{"host":"localhost","port":25555},
    "desc": "Wait for a network node to do it's job."
},
{
    "name": "Send on network",
    "code": "NetworkOutputNode",
    "inputs": {
        "val": "Double"
    },
    "outputs": {},
    "args":{"host":"localhost","port":25555},
    "desc": "Wait for a network node to do it's job."
},
{
    "name": "Print to console",
    "code": "OutputNode",
    "inputs": {
        "val": "Double"
    },
    "outputs": {},
    "args":{},
    "desc": "Print the input."
}
]