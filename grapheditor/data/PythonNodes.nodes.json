[{
    "name": "String Constant",
    "code": "string.const",
    "inputs": {},
    "outputs": {
        "result": "String"
    },
    "args":"Hello World!",
    "desc": "Outputs {arg}"
},
{
    "name": "Number Constant",
    "code": "number.const",
    "inputs": {},
    "outputs": {
        "result": "Double"
    },
    "args":1,
    "desc": "Outputs {arg}"
},
{
    "name": "Leaky Integrator",
    "code": "structures.leakyintegrator",
    "inputs": {
        "val": "Double"
    },
    "outputs": {
        "result": "Boolean"
    },
    "args":{"time":1,"decay":1},
    "desc": "Adds inputs and looses {decay} per {time} s."
},
{
    "name": "Trigger",
    "code": "string.trigger",
    "inputs": {},
    "outputs": {
        "result": "String"
    },
    "args":{"time":5, "val":"Hello World!"},
    "desc": "Outputs {arg}"
},
{
    "name": "Trigger",
    "code": "number.trigger",
    "inputs": {},
    "outputs": {
        "result": "Double"
    },
    "args":{"time":5, "val":1},
    "desc": "Outputs {arg}"
},
{
    "name": "Trigger",
    "code": "boolean.trigger",
    "inputs": {},
    "outputs": {
        "result": "Boolean"
    },
    "args":{"time":5, "val":true},
    "desc": "Outputs {arg}"
},
{
    "name": "Trigger Arg",
    "code": "boolean.argtrigger",
    "inputs": {},
    "outputs": {
        "result": "Boolean"
    },
    "args":{"time":5, "val":"test"},
    "desc": "Outputs {arg}"
},
{
    "name": "Trigger Arg",
    "code": "number.argtrigger",
    "inputs": {},
    "outputs": {
        "result": "Double"
    },
    "args":{"time":5, "val":"test"},
    "desc": "Outputs {arg}"
},
{
    "name": "Trigger Arg",
    "code": "string.argtrigger",
    "inputs": {},
    "outputs": {
        "result": "String"
    },
    "args":{"time":5, "val":"test"},
    "desc": "Outputs {arg}"
},
{
    "name": "Trigger Arg",
    "code": "arrays.argtrigger",
    "inputs": {},
    "outputs": {
        "result": "[Object]"
    },
    "args":{"time":5, "val":"test"},
    "desc": "Outputs {arg}"
},
{
    "name": "Boolean Constant",
    "code": "boolean.const",
    "inputs": {},
    "outputs": {
        "result": "Boolean"
    },
    "args":true,
    "desc": "Outputs {args}."
},
{
    "name": "Boolean Constant Arg",
    "code": "boolean.argconst",
    "inputs": {},
    "outputs": {
        "result": "Boolean"
    },
    "args":"test",
    "desc": "Outputs {args}."
},
{
    "name": "String Constant Arg",
    "code": "string.argconst",
    "inputs": {},
    "outputs": {
        "result": "String"
    },
    "args":"test",
    "desc": "Outputs {args}."
},
{
    "name": "Number Constant Arg",
    "code": "number.argconst",
    "inputs": {},
    "outputs": {
        "result": "Double"
    },
    "args":"test",
    "desc": "Outputs {args}."
},
{
    "name": "Array Constant Arg",
    "code": "arrays.argconst",
    "inputs": {},
    "outputs": {
        "result": "[Object]"
    },
    "args":"test",
    "desc": "Outputs {args}."
},
{
    "name": "Concatenate",
    "code": "string.concat",
    "inputs": {
        "left": "String",
        "right": "String"
    },
    "outputs": {
        "result": "String"
    },
    "args":{},
    "desc": "Concatenate the two inputs."
},
{
    "name": "Index of",
    "code": "string.indexof",
    "inputs": {
        "str": "String",
        "ref": "String",
        "offset": "Double"
    },
    "outputs": {
        "result": "Double"
    },
    "args":{},
    "desc": "The index of a substring."
},
{
    "name": "Split",
    "code": "string.split",
    "inputs": {
        "str": "String",
        "splitter": "String"
    },
    "outputs": {
        "result": "[String]"
    },
    "args":{},
    "desc": "Split a string."
},
{
    "name": "Starts with",
    "code": "string.startswith",
    "inputs": {
        "str": "String",
        "ref": "String"
    },
    "outputs": {
        "result": "Boolean"
    },
    "args":{},
    "desc": "Starts with a substring."
},
{
    "name": "Ends with",
    "code": "string.endswith",
    "inputs": {
        "str": "String",
        "ref": "String"
    },
    "outputs": {
        "result": "Boolean"
    },
    "args":{},
    "desc": "Ends with a substring."
},
{
    "name": "Sum",
    "code": "number.sum",
    "inputs": {
        "left": "Double",
        "right": "Double"
    },
    "outputs": {
        "result": "Double"
    },
    "args":{},
    "desc": "Sum the two inputs."
},
{
    "name": "Subtraction",
    "code": "number.subtract",
    "inputs": {
        "left": "Double",
        "right": "Double"
    },
    "outputs": {
        "result": "Double"
    },
    "desc": "Subtract the two inputs."
},
{
    "name": "Multiplication",
    "code": "number.mult",
    "inputs": {
        "left": "Double",
        "right": "Double"
    },
    "outputs": {
        "result": "Double"
    },
    "desc": "Multiplicate the two inputs."
},
{
    "name": "Divide",
    "code": "number.div",
    "inputs": {
        "left": "Double",
        "right": "Double"
    },
    "outputs": {
        "result": "Double"
    },
    "desc": "Divide the two inputs."
},
{
    "name": "Split Flow",
    "code": "default.splitflow",
    "inputs": {
        "val": "Object"
    },
    "outputs": {
        "left": "Object",
        "right": "Object"
    },
    "desc": "Passes the variable to both outputs."
},
{
    "name": "Split Flow 5",
    "code": "default.splitflow5",
    "inputs": {
        "val": "Object"
    },
    "outputs": {
        "1": "Object",
        "2": "Object",
        "3": "Object",
        "4": "Object",
        "5": "Object"
    },
    "desc": "Passes the variable to all outputs."
},
{
    "name": "Equals 5",
    "code": "string.equal",
    "inputs": {
        "1": "String",
        "2": "String",
        "3": "String",
        "4": "String",
        "5": "String"
    },
    "outputs": {
        "result": "Boolean"
    },
    "args":5,
    "desc": "Checks if first #{args} inputs are equal."
},
{
    "name": "Equals 5",
    "code": "number.equal",
    "inputs": {
        "1": "Double",
        "2": "Double",
        "3": "Double",
        "4": "Double",
        "5": "Double"
    },
    "outputs": {
        "result": "Boolean"
    },
    "args":5,
    "desc": "Checks if first #{args} inputs are equal."
},
{
    "name": "Equals 5",
    "code": "boolean.equal",
    "inputs": {
        "1": "Boolean",
        "2": "Boolean",
        "3": "Boolean",
        "4": "Boolean",
        "5": "Boolean"
    },
    "outputs": {
        "result": "Boolean"
    },
    "args":5,
    "desc": "Checks if first #{args} inputs are equal."
},
{
    "name": "Less Than",
    "code": "number.less",
    "inputs": {
        "left": "Double",
        "right": "Double"
    },
    "outputs": {
        "result": "Boolean"
    },
    "args":{},
    "desc": "Checks if left is less than right."
},
{
    "name": "Greater Than",
    "code": "number.greater",
    "inputs": {
        "left": "Double",
        "right": "Double"
    },
    "outputs": {
        "result": "Boolean"
    },
    "args":{},
    "desc": "Checks if left is greater than right."
},
{
    "name": "And",
    "code": "boolean.and",
    "inputs": {
        "left": "Boolean",
        "right": "Boolean"
    },
    "outputs": {
        "result": "Boolean"
    },
    "args":{},
    "desc": "Checks if both are true."
},
{
    "name": "Or",
    "code": "boolean.or",
    "inputs": {
        "left": "Boolean",
        "right": "Boolean"
    },
    "outputs": {
        "result": "Boolean"
    },
    "args":{},
    "desc": "Checks if at least one is true."
},
{
    "name": "Not",
    "code": "boolean.not",
    "inputs": {
        "val": "Boolean"
    },
    "outputs": {
        "result": "Boolean"
    },
    "args":{},
    "desc": "Invert the input."
},
{
    "name": "If",
    "code": "structures.if",
    "inputs": {
        "condition": "Boolean",
        "val": "Object"
    },
    "outputs": {
        "true": "Object",
        "false": "Object"
    },
    "args":{},
    "desc": "An if statement left is true right is false."
},
{
    "name": "While less than",
    "code": "structures.whileless",
    "inputs": {
        "initial": "Double",
        "val": "Double"
    },
    "outputs": {
        "leave": "Double",
        "loop": "Double"
    },
    "loopback":[
        "initial"
    ],
    "args":{},
    "desc": "While left less than right do right else left."
},
{
    "name": "While greater than",
    "code": "structures.whilegreater",
    "inputs": {
        "initial": "Double",
        "val": "Double"
    },
    "outputs": {
        "leave": "Double",
        "loop": "Double"
    },
    "loopback":[
        "initial"
    ],
    "args":{},
    "desc": "While left larger than right do right else left."
},
{
    "name": "Pass Any",
    "code": "default.any",
    "inputs": {
        "val": "Object"
    },
    "outputs": {
        "result": "Object"
    },
    "loopback":[
        "val"
    ],
    "args":{},
    "desc": "Just pipes value through. Picks any input."
},
{
    "name": "Call executable",
    "code": "sys.executable",
    "inputs": {
        "arg": "String"
    },
    "outputs": {
        "result": "String"
    },
    "args":"ping \"localhost\"",
    "desc": "Call {args} with input as param"
},
{
    "name": "Call graph",
    "code": "sys.subgraph",
    "inputs": {
        "arg": "Object"
    },
    "outputs": {
        "result": "Object"
    },
    "args":"Default",
    "desc": "Call graph with {args} as param"
},
{
    "name": "Set Output",
    "code": "sys.output",
    "inputs": {
        "arg": "Object"
    },
    "outputs": {},
    "args":"test",
    "desc": "Set the output \"arg\" of the graph."
},
{
    "name": "Parse Json",
    "code": "json.parse",
    "inputs": {
        "val": "String"
    },
    "outputs": {
        "result": "Object"
    },
    "args":{},
    "desc": "Parse JSON code."
},
{
    "name": "Parse Json",
    "code": "json.stringify",
    "inputs": {
        "val": "Object"
    },
    "outputs": {
        "result": "String"
    },
    "args":{},
    "desc": "Parse JSON code."
},
{
    "name": "Wait for network",
    "code": "sys.network",
    "inputs": {
        "val": "Object"
    },
    "outputs": {
        "result": "Object"
    },
    "args":{"host":"localhost","port":25555},
    "desc": "Wait for a network node to do it's job."
},
{
    "name": "Wait for network",
    "code": "sys.networkinput",
    "inputs": {},
    "outputs": {
        "result": "Object"
    },
    "args":{"host":"localhost","port":25555},
    "desc": "Wait for a network node to do it's job."
},
{
    "name": "Send on network",
    "code": "sys.networkoutput",
    "inputs": {
        "val": "Object"
    },
    "outputs": {},
    "args":{"host":"localhost","port":25555},
    "desc": "Wait for a network node to do it's job."
},
{
    "name": "Print to console",
    "code": "sys.print",
    "inputs": {
        "val": "Object"
    },
    "outputs": {},
    "args":{},
    "desc": "Print the input."
},
{
    "name": "RC Car Controller",
    "code": "raspi.rccar",
    "inputs": {
        "speed": "Double",
        "turn": "Double"
    },
    "outputs": {},
    "args":{},
    "desc": "Controll the rc car."
},
{
    "name": "Video Input Stream",
    "code": "cv.video",
    "inputs": {},
    "outputs": {
    	"result":"Image"
    },
    "args":{"fps":10, "resource":0},
    "desc": "Get videos from {resource}."
},
{
    "name": "Resize",
    "code": "cv.resize",
    "inputs": {
    	"img":"Image"
    },
    "outputs": {
    	"result":"Image"
    },
    "args":{"width":320, "height":240},
    "desc": "Resize an image."
},
{
    "name": "InRange",
    "code": "cv.inrange",
    "inputs": {
    	"img":"Image"
    },
    "outputs": {
    	"result":"Image"
    },
    "args":{"lh":0, "ls":0, "lv":0, "uh":255, "us":40, "uv":255},
    "desc": "In range operation on image."
},
{
    "name": "Convert bgr 2 hsv",
    "code": "cv.bgr2hsv",
    "inputs": {
    	"img":"Image"
    },
    "outputs": {
    	"result":"Image"
    },
    "args":{},
    "desc": "Convert a bgr to hsv image."
},
{
    "name": "Convert hsv 2 bgr",
    "code": "cv.hsv2bgr",
    "inputs": {
    	"img":"Image"
    },
    "outputs": {
    	"result":"Image"
    },
    "args":{},
    "desc": "Convert a hsv to bgr image."
},
{
    "name": "Blur Image",
    "code": "cv.medianblur",
    "inputs": {
    	"img":"Image"
    },
    "outputs": {
    	"result":"Image"
    },
    "args":10,
    "desc": "Blur Image with median blur."
},
{
    "name": "Blur Image",
    "code": "cv.gaussianblur",
    "inputs": {
    	"img":"Image"
    },
    "outputs": {
    	"result":"Image"
    },
    "args":1,
    "desc": "Blur Image with gaussian blur."
},
{
    "name": "Fixed Intensity",
    "code": "cv.fixedintensity",
    "inputs": {
    	"img":"Image"
    },
    "outputs": {
    	"result":"Image"
    },
    "args":127,
    "desc": "Fixed intensity to {args}."
},
{
    "name": "Fixed Hue",
    "code": "cv.fixedhue",
    "inputs": {
    	"img":"Image"
    },
    "outputs": {
    	"result":"Image"
    },
    "args":127,
    "desc": "Fixed hue to {args}."
},
{
    "name": "Fixed Saturisation",
    "code": "cv.fixedsaturisation",
    "inputs": {
    	"img":"Image"
    },
    "outputs": {
    	"result":"Image"
    },
    "args":127,
    "desc": "Fixed saturisation to {args}."
},
{
    "name": "Add Weighted",
    "code": "cv.addweighted",
    "inputs": {
    	"left":"Image",
    	"right":"Image"
    },
    "outputs": {
    	"result":"Image"
    },
    "args":{"left":1.75,"right":-0.75},
    "desc": "Add images with weights."
},
{
    "name": "Show Image",
    "code": "cv.show",
    "inputs": {
        "img":"Image"
    },
    "outputs": {
    },
    "args":{"title":"CV Debug View"},
    "desc": "Show an image."
},
{
    "name": "Record Video",
    "code": "cv.record",
    "inputs": {
        "img":"Image"
    },
    "outputs": {
    },
    "args":{"resource":"webcam.avi"},
    "desc": "Record a video to file."
},
{
    "name": "Convert image to distribution",
    "code": "cv.img2distribution",
    "inputs": {
    	"img":"Image"
    },
    "outputs": {
    	"result":"[Double]"
    },
    "args":{},
    "desc": "Convert a grayscale image into a posterior distribution."
}
]